
snippet =>
  (${1}) => ${0:${VISUAL}}

snippet =>(
  (${1}) => (
    ${0:${VISUAL}}
  )

snippet af
  (${1}) => {
    return ${0:${VISUAL}}
  }

snippet daf
  const ${1:function_name} = (${2}) => {
    return ${0:${VISUAL}}
  }

snippet defun
  const ${1:function_name} = function(${2}) {
    ${0:${VISUAL}}
  }

# tertiary conditional
snippet tern
  ${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}


snippet switch
  switch (${1:expression}) {
    case '${3:case}':
      ${4}
      break
    ${0}
    default:
      ${2}
  }

# throw Error
snippet throw
  throw new Error('${1:error message}')


snippet const
  const ${1} = ${0}
snippet let
  let ${1} = ${0}
# return
snippet ret
  return ${0:result}


# Documentation
# docstring
snippet /**
  /**
   * ${0:description}
   *
   */
snippet @par
  @param {${1:type}} ${2:name} ${0:description}
snippet @ret
  @return {${1:type}} ${0:description}


# DOM selectors


# Elements by class
snippet by.
  ${1:document}.getElementsByClassName('${0:class}')
# Element by ID
snippet by#
  ${1:document}.getElementById('${0:element ID}')
# Query selector
snippet qs
  ${1:document}.querySelector('${0:CSS selector}')
# Query selector all
snippet qsa
  ${1:document}.querySelectorAll('${0:CSS selector}')

# Debugging
snippet de
  debugger
snippet cl "console.log"
  console.log(${0})
snippet cd "console.debug"
  console.debug(${0})
snippet ce "console.error"
  console.error(${0})
snippet cw "console.warn"
  console.warn(${0})
snippet ci "console.info"
  console.info(${0})
snippet ct "console.trace"
  console.trace(${0:label})
snippet ctime "console.time ... console.timeEnd"
  console.time("${1:label}")
  ${0:${VISUAL}}
  console.timeEnd("$1")
snippet cgroup "console.group"
  console.group("${1:label}")
  ${0:${VISUAL}}
  console.log(${2})
  console.log(${3})
  console.groupEnd()

# Imports
snippet import "import xyz from 'xyz'"
  import ${1} from '${2:$1}'
snippet imp "import { member } from 'xyz'"
  import { ${1} } from '${2}'

snippet export
  export default ${0}
snippet exp
  export const ${0} = ${1}

# React
snippet fc
  import React, { useState } from 'react'
  export function ${1:name}({ ${2:props} }) {
    const [state, setState] = useState(${4:initialState})
    ${5:VISUAL}
    return (
      <div>${3:jsx}</div>
    )
  }

snippet ir
  import React from 'react'

snippet cdm
  componentDidMount() {
    ${1}
  }
snippet cdup
  componentDidUpdate(prevProps, prevState) {
    ${1}
  }
snippet cwm
  componentWillMount() {
    ${1}
  }
snippet cwr
  componentWillReceiveProps(nextProps) {
    ${1}
  }
snippet cwun
  componentWillUnmount() {
    ${1}
  }
snippet cwu
  componentWillUpdate(nextProps, nextState) {
    ${1}
  }

snippet dp
  static defaultProps = {
    ${1}: ${2},
  }

snippet rfc
  export const ${1:ComponentName} = function(${2:props}) {
    return (
      <div>
        $1
      </div>
    )
  }

snippet rcc
  export default class ${1:ClassName} extends React.Component {
    construtor(props) {
      super(props)
      this.state = {

      }
    }

    render() {
      return (
        <div>
          $2
        </div>
      )
    }
  }

snippet render
  render() {
    return (
      <div>
        ${1:<div />}
      </div>
    )
  }

# Redux
snippet conn
	connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(<${3:VISUAL}/>)

snippet econn
	export const ${0:Component} = connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(<${3:VISUAL}/>)

snippet reducer
	export const ${1:reducerName} = (state={}, action) => {
		switch(action.type) {
			case ${1:action}:
				return {
					...state,
					$2
				}
			default:
				return state
		}
	}

snippet maps
	const mapStateToProps = (state) => {
		return {
			${1:propName}: state.$1,
		}
	}
snippet mapd
	const mapDispatchToProps = (dispatch) => {
		return {
			${1:propName}: () => {
				dispatch(${2:actionName}())
			},
		}
	}


# Hooks & shit
snippet usecb
  const ${1:callbackName} = useCallback((${2:args}) => {
    ${3:body}
  }, [${4:deps}])

snippet usered
  const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialStae}, ${5:lazyInitFb})

snippet useeff
  useEffect(() => {
    ${1:body}
    return function cleanup() {
      ${3:cleanup}
    }
  }, [${2:deps}])

snippet usest
  const [${1:state}, ${2:setState}] = useState(${3:initialValue})
